/*
 * Outgoing file RESTful service
 *
 * The methods are restricted to portal user that have the permission for sending documents. Different API versions work differently - be sure  you know what you're doing, before you set an API version. The portal may define a minimum API version that can't be overridden.  Before you can use the REST API for your portal, you need to accept the DSGVO AVV once. Also, the REST API is currently restricted to customers  that bought a PDFMAILER (non-Pure) license from gotomaxx directly, or are coming from XRechnung.new or ZUGFeRD.new.  If you don't know how to get your personal Bearer token (which is required to call any API method), please contact our technical support.  In case your REST client doesn't support OAuth2 or Bearer token, there are other possibilities for authentication:  - Use basic http authentication with your user credentials - Send a valid session ID as value in the parameter (GET or POST) `__sid` with every request  Please ask our technical staff for instructions how to create a valid session ID that can be used with this REST API.  __NOTE__: Boolean parameter values should be given as `1` (`true`) or `0` (`false`).  __NOTE__: The XRechnung API functionality requires a separate license and user permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// JSON document summary object template for documentation purposes and XML transformation
    /// </summary>
    [DataContract]
    public partial class GotomaxxJsonDocumentShipping : IEquatable<GotomaxxJsonDocumentShipping>
    {
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Address line
        /// </summary>
        /// <value>Address line</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="addressLine", EmitDefaultValue=false)]
        public string AddressLine { get; set; }

        /// <summary>
        /// Address line 2
        /// </summary>
        /// <value>Address line 2</value>
        [MinLength(1)]
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Address line 3
        /// </summary>
        /// <value>Address line 3</value>
        [MinLength(1)]
        [DataMember(Name="addressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// ZIP code
        /// </summary>
        /// <value>ZIP code</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// City  __NOTE__: Actually this value is required, but may be auto-completed from the ZIP code.
        /// </summary>
        /// <value>City  __NOTE__: Actually this value is required, but may be auto-completed from the ZIP code.</value>
        [MinLength(1)]
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }


        /// <summary>
        /// Country  __NOTE__: Actually this value is required, but may be auto-completed from other values.
        /// </summary>
        /// <value>Country  __NOTE__: Actually this value is required, but may be auto-completed from other values.</value>
        [TypeConverter(typeof(CustomEnumConverter<CountryEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CountryEnum
        {
            
            /// <summary>
            /// Enum DEEnum for DE
            /// </summary>
            [EnumMember(Value = "DE")]
            DEEnum = 1,
            
            /// <summary>
            /// Enum ATEnum for AT
            /// </summary>
            [EnumMember(Value = "AT")]
            ATEnum = 2,
            
            /// <summary>
            /// Enum CHEnum for CH
            /// </summary>
            [EnumMember(Value = "CH")]
            CHEnum = 3,
            
            /// <summary>
            /// Enum FREnum for FR
            /// </summary>
            [EnumMember(Value = "FR")]
            FREnum = 4,
            
            /// <summary>
            /// Enum ITEnum for IT
            /// </summary>
            [EnumMember(Value = "IT")]
            ITEnum = 5,
            
            /// <summary>
            /// Enum CNEnum for CN
            /// </summary>
            [EnumMember(Value = "CN")]
            CNEnum = 6,
            
            /// <summary>
            /// Enum BEEnum for BE
            /// </summary>
            [EnumMember(Value = "BE")]
            BEEnum = 7,
            
            /// <summary>
            /// Enum LUEnum for LU
            /// </summary>
            [EnumMember(Value = "LU")]
            LUEnum = 8,
            
            /// <summary>
            /// Enum NLEnum for NL
            /// </summary>
            [EnumMember(Value = "NL")]
            NLEnum = 9,
            
            /// <summary>
            /// Enum DKEnum for DK
            /// </summary>
            [EnumMember(Value = "DK")]
            DKEnum = 10,
            
            /// <summary>
            /// Enum IEEnum for IE
            /// </summary>
            [EnumMember(Value = "IE")]
            IEEnum = 11,
            
            /// <summary>
            /// Enum GREnum for GR
            /// </summary>
            [EnumMember(Value = "GR")]
            GREnum = 12,
            
            /// <summary>
            /// Enum PTEnum for PT
            /// </summary>
            [EnumMember(Value = "PT")]
            PTEnum = 13,
            
            /// <summary>
            /// Enum ESEnum for ES
            /// </summary>
            [EnumMember(Value = "ES")]
            ESEnum = 14,
            
            /// <summary>
            /// Enum FIEnum for FI
            /// </summary>
            [EnumMember(Value = "FI")]
            FIEnum = 15,
            
            /// <summary>
            /// Enum SEEnum for SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SEEnum = 16,
            
            /// <summary>
            /// Enum EEEnum for EE
            /// </summary>
            [EnumMember(Value = "EE")]
            EEEnum = 17,
            
            /// <summary>
            /// Enum LVEnum for LV
            /// </summary>
            [EnumMember(Value = "LV")]
            LVEnum = 18,
            
            /// <summary>
            /// Enum LTEnum for LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LTEnum = 19,
            
            /// <summary>
            /// Enum MTEnum for MT
            /// </summary>
            [EnumMember(Value = "MT")]
            MTEnum = 20,
            
            /// <summary>
            /// Enum PLEnum for PL
            /// </summary>
            [EnumMember(Value = "PL")]
            PLEnum = 21,
            
            /// <summary>
            /// Enum SKEnum for SK
            /// </summary>
            [EnumMember(Value = "SK")]
            SKEnum = 22,
            
            /// <summary>
            /// Enum SIEnum for SI
            /// </summary>
            [EnumMember(Value = "SI")]
            SIEnum = 23,
            
            /// <summary>
            /// Enum CZEnum for CZ
            /// </summary>
            [EnumMember(Value = "CZ")]
            CZEnum = 24,
            
            /// <summary>
            /// Enum HUEnum for HU
            /// </summary>
            [EnumMember(Value = "HU")]
            HUEnum = 25,
            
            /// <summary>
            /// Enum CYEnum for CY
            /// </summary>
            [EnumMember(Value = "CY")]
            CYEnum = 26,
            
            /// <summary>
            /// Enum BGEnum for BG
            /// </summary>
            [EnumMember(Value = "BG")]
            BGEnum = 27,
            
            /// <summary>
            /// Enum ROEnum for RO
            /// </summary>
            [EnumMember(Value = "RO")]
            ROEnum = 28,
            
            /// <summary>
            /// Enum HREnum for HR
            /// </summary>
            [EnumMember(Value = "HR")]
            HREnum = 29
        }

        /// <summary>
        /// Country  __NOTE__: Actually this value is required, but may be auto-completed from other values.
        /// </summary>
        /// <value>Country  __NOTE__: Actually this value is required, but may be auto-completed from other values.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public CountryEnum Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GotomaxxJsonDocumentShipping {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine: ").Append(AddressLine).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GotomaxxJsonDocumentShipping)obj);
        }

        /// <summary>
        /// Returns true if GotomaxxJsonDocumentShipping instances are equal
        /// </summary>
        /// <param name="other">Instance of GotomaxxJsonDocumentShipping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GotomaxxJsonDocumentShipping other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AddressLine == other.AddressLine ||
                    AddressLine != null &&
                    AddressLine.Equals(other.AddressLine)
                ) && 
                (
                    AddressLine2 == other.AddressLine2 ||
                    AddressLine2 != null &&
                    AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    AddressLine3 == other.AddressLine3 ||
                    AddressLine3 != null &&
                    AddressLine3.Equals(other.AddressLine3)
                ) && 
                (
                    Zip == other.Zip ||
                    Zip != null &&
                    Zip.Equals(other.Zip)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Country == other.Country ||
                    
                    Country.Equals(other.Country)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AddressLine != null)
                    hashCode = hashCode * 59 + AddressLine.GetHashCode();
                    if (AddressLine2 != null)
                    hashCode = hashCode * 59 + AddressLine2.GetHashCode();
                    if (AddressLine3 != null)
                    hashCode = hashCode * 59 + AddressLine3.GetHashCode();
                    if (Zip != null)
                    hashCode = hashCode * 59 + Zip.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    
                    hashCode = hashCode * 59 + Country.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GotomaxxJsonDocumentShipping left, GotomaxxJsonDocumentShipping right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GotomaxxJsonDocumentShipping left, GotomaxxJsonDocumentShipping right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
