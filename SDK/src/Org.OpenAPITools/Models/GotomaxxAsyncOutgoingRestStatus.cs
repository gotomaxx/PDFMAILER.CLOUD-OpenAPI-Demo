/*
 * Outgoing file RESTful service
 *
 * The methods are restricted to portal user that have the permission for sending documents. Different API versions work differently - be sure  you know what you're doing, before you set an API version. The portal may define a minimum API version that can't be overridden.  Before you can use the REST API for your portal, you need to accept the DSGVO AVV once. Also, the REST API is currently restricted to customers  that bought a PDFMAILER (non-Pure) license from gotomaxx directly, or are coming from XRechnung.new or ZUGFeRD.new.  If you don't know how to get your personal Bearer token (which is required to call any API method), please contact our technical support.  In case your REST client doesn't support OAuth2 or Bearer token, there are other possibilities for authentication:  - Use basic http authentication with your user credentials - Send a valid session ID as value in the parameter (GET or POST) `__sid` with every request  Please ask our technical staff for instructions how to create a valid session ID that can be used with this REST API.  __NOTE__: Boolean parameter values should be given as `1` (`true`) or `0` (`false`).  __NOTE__: The XRechnung API functionality requires a separate license and user permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// JSON REST request status object
    /// </summary>
    [DataContract]
    public partial class GotomaxxAsyncOutgoingRestStatus : IEquatable<GotomaxxAsyncOutgoingRestStatus>
    {
        /// <summary>
        /// Asynchronous REST request response token
        /// </summary>
        /// <value>Asynchronous REST request response token</value>
        [Required]
        [StringLength(128, MinimumLength=128)]
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Timestamp when the request was finished
        /// </summary>
        /// <value>Timestamp when the request was finished</value>
        [Required]
        [DataMember(Name="finished", EmitDefaultValue=true)]
        public int? Finished { get; set; }


        /// <summary>
        /// Status of the request  - `Waiting`: Waiting for processing - `Processing`: Processing - `OkHook`: Sending the response web hook request (processing succeed) - `ErrorHook`: Sending the response web hook request (processing failed) - `Ok`: Processing succeed (the `response` property has the desired request response) - `Error`: Processing failed (the `response` property may have debug informations (if `code` is `400`), otherwise see at `code` and  `message`)
        /// </summary>
        /// <value>Status of the request  - `Waiting`: Waiting for processing - `Processing`: Processing - `OkHook`: Sending the response web hook request (processing succeed) - `ErrorHook`: Sending the response web hook request (processing failed) - `Ok`: Processing succeed (the `response` property has the desired request response) - `Error`: Processing failed (the `response` property may have debug informations (if `code` is `400`), otherwise see at `code` and  `message`)</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum WaitingEnum for Waiting
            /// </summary>
            [EnumMember(Value = "Waiting")]
            WaitingEnum = 1,
            
            /// <summary>
            /// Enum ProcessingEnum for Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            ProcessingEnum = 2,
            
            /// <summary>
            /// Enum OkHookEnum for OkHook
            /// </summary>
            [EnumMember(Value = "OkHook")]
            OkHookEnum = 3,
            
            /// <summary>
            /// Enum ErrorHookEnum for ErrorHook
            /// </summary>
            [EnumMember(Value = "ErrorHook")]
            ErrorHookEnum = 4,
            
            /// <summary>
            /// Enum OkEnum for Ok
            /// </summary>
            [EnumMember(Value = "Ok")]
            OkEnum = 5,
            
            /// <summary>
            /// Enum ErrorEnum for Error
            /// </summary>
            [EnumMember(Value = "Error")]
            ErrorEnum = 6
        }

        /// <summary>
        /// Status of the request  - &#x60;Waiting&#x60;: Waiting for processing - &#x60;Processing&#x60;: Processing - &#x60;OkHook&#x60;: Sending the response web hook request (processing succeed) - &#x60;ErrorHook&#x60;: Sending the response web hook request (processing failed) - &#x60;Ok&#x60;: Processing succeed (the &#x60;response&#x60; property has the desired request response) - &#x60;Error&#x60;: Processing failed (the &#x60;response&#x60; property may have debug informations (if &#x60;code&#x60; is &#x60;400&#x60;), otherwise see at &#x60;code&#x60; and  &#x60;message&#x60;)
        /// </summary>
        /// <value>Status of the request  - &#x60;Waiting&#x60;: Waiting for processing - &#x60;Processing&#x60;: Processing - &#x60;OkHook&#x60;: Sending the response web hook request (processing succeed) - &#x60;ErrorHook&#x60;: Sending the response web hook request (processing failed) - &#x60;Ok&#x60;: Processing succeed (the &#x60;response&#x60; property has the desired request response) - &#x60;Error&#x60;: Processing failed (the &#x60;response&#x60; property may have debug informations (if &#x60;code&#x60; is &#x60;400&#x60;), otherwise see at &#x60;code&#x60; and  &#x60;message&#x60;)</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [Required]
        [DataMember(Name="response", EmitDefaultValue=true)]
        public GotomaxxAsyncOutgoingRestStatusResponse Response { get; set; }

        /// <summary>
        /// http response code
        /// </summary>
        /// <value>http response code</value>
        [Required]
        [Range(200, 599)]
        [DataMember(Name="code", EmitDefaultValue=true)]
        public int? Code { get; set; }

        /// <summary>
        /// http response message
        /// </summary>
        /// <value>http response message</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Number of failed tries to send the response to the web hook URI
        /// </summary>
        /// <value>Number of failed tries to send the response to the web hook URI</value>
        [Required]
        [DataMember(Name="sendTry", EmitDefaultValue=true)]
        public int? SendTry { get; set; }

        /// <summary>
        /// The last http response code the web hook URI sent in the response, or the last cURL error code plus 1000
        /// </summary>
        /// <value>The last http response code the web hook URI sent in the response, or the last cURL error code plus 1000</value>
        [Required]
        [DataMember(Name="hookCode", EmitDefaultValue=true)]
        public int? HookCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GotomaxxAsyncOutgoingRestStatus {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SendTry: ").Append(SendTry).Append("\n");
            sb.Append("  HookCode: ").Append(HookCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GotomaxxAsyncOutgoingRestStatus)obj);
        }

        /// <summary>
        /// Returns true if GotomaxxAsyncOutgoingRestStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of GotomaxxAsyncOutgoingRestStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GotomaxxAsyncOutgoingRestStatus other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) && 
                (
                    Finished == other.Finished ||
                    Finished != null &&
                    Finished.Equals(other.Finished)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Response == other.Response ||
                    Response != null &&
                    Response.Equals(other.Response)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    SendTry == other.SendTry ||
                    SendTry != null &&
                    SendTry.Equals(other.SendTry)
                ) && 
                (
                    HookCode == other.HookCode ||
                    HookCode != null &&
                    HookCode.Equals(other.HookCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                    if (Finished != null)
                    hashCode = hashCode * 59 + Finished.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Response != null)
                    hashCode = hashCode * 59 + Response.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (SendTry != null)
                    hashCode = hashCode * 59 + SendTry.GetHashCode();
                    if (HookCode != null)
                    hashCode = hashCode * 59 + HookCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GotomaxxAsyncOutgoingRestStatus left, GotomaxxAsyncOutgoingRestStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GotomaxxAsyncOutgoingRestStatus left, GotomaxxAsyncOutgoingRestStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
