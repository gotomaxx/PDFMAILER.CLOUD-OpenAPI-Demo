/*
 * Outgoing file RESTful service
 *
 * The methods are restricted to portal user that have the permission for sending documents. Different API versions work differently - be sure  you know what you're doing, before you set an API version. The portal may define a minimum API version that can't be overridden.  Before you can use the REST API for your portal, you need to accept the DSGVO AVV once. Also, the REST API is currently restricted to customers  that bought a PDFMAILER (non-Pure) license from gotomaxx directly, or are coming from XRechnung.new or ZUGFeRD.new.  If you don't know how to get your personal Bearer token (which is required to call any API method), please contact our technical support.  In case your REST client doesn't support OAuth2 or Bearer token, there are other possibilities for authentication:  - Use basic http authentication with your user credentials - Send a valid session ID as value in the parameter (GET or POST) `__sid` with every request  Please ask our technical staff for instructions how to create a valid session ID that can be used with this REST API.  __NOTE__: Boolean parameter values should be given as `1` (`true`) or `0` (`false`).  __NOTE__: The XRechnung API functionality requires a separate license and user permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// PDF upload REST response object
    /// </summary>
    [DataContract]
    public partial class GotomaxxPdfUploadRestResponse : IEquatable<GotomaxxPdfUploadRestResponse>
    {
        /// <summary>
        /// Portal ID
        /// </summary>
        /// <value>Portal ID</value>
        [Required]
        [DataMember(Name="portal", EmitDefaultValue=false)]
        public int Portal { get; set; }

        /// <summary>
        /// Document record ID
        /// </summary>
        /// <value>Document record ID</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }


        /// <summary>
        /// Delivery status  Possible status values are:  - `0`: Uploading - `1`: Waiting for delivery - `2`: Delivery - `3`: Deliverd - `4`: Delivery failed - `5`: Deleting - `6`: Waiting for delivery approval
        /// </summary>
        /// <value>Delivery status  Possible status values are:  - `0`: Uploading - `1`: Waiting for delivery - `2`: Delivery - `3`: Deliverd - `4`: Delivery failed - `5`: Deleting - `6`: Waiting for delivery approval</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            
            _0Enum = 0,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            
            _1Enum = 1,
            
            /// <summary>
            /// Enum _2Enum for 2
            /// </summary>
            
            _2Enum = 2,
            
            /// <summary>
            /// Enum _3Enum for 3
            /// </summary>
            
            _3Enum = 3,
            
            /// <summary>
            /// Enum _4Enum for 4
            /// </summary>
            
            _4Enum = 4,
            
            /// <summary>
            /// Enum _5Enum for 5
            /// </summary>
            
            _5Enum = 5,
            
            /// <summary>
            /// Enum _6Enum for 6
            /// </summary>
            
            _6Enum = 6
        }

        /// <summary>
        /// Delivery status  Possible status values are:  - &#x60;0&#x60;: Uploading - &#x60;1&#x60;: Waiting for delivery - &#x60;2&#x60;: Delivery - &#x60;3&#x60;: Deliverd - &#x60;4&#x60;: Delivery failed - &#x60;5&#x60;: Deleting - &#x60;6&#x60;: Waiting for delivery approval
        /// </summary>
        /// <value>Delivery status  Possible status values are:  - &#x60;0&#x60;: Uploading - &#x60;1&#x60;: Waiting for delivery - &#x60;2&#x60;: Delivery - &#x60;3&#x60;: Deliverd - &#x60;4&#x60;: Delivery failed - &#x60;5&#x60;: Deleting - &#x60;6&#x60;: Waiting for delivery approval</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The asynchronous upload token
        /// </summary>
        /// <value>The asynchronous upload token</value>
        [Required]
        [DataMember(Name="asyncUploadToken", EmitDefaultValue=true)]
        public string AsyncUploadToken { get; set; }

        /// <summary>
        /// Timestamp when uploaded
        /// </summary>
        /// <value>Timestamp when uploaded</value>
        [Required]
        [DataMember(Name="uploaded", EmitDefaultValue=false)]
        public int Uploaded { get; set; }

        /// <summary>
        /// Timestamp when delivered to the recipient
        /// </summary>
        /// <value>Timestamp when delivered to the recipient</value>
        [Required]
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public int Delivered { get; set; }

        /// <summary>
        /// File size in bytes
        /// </summary>
        /// <value>File size in bytes</value>
        [Required]
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int Size { get; set; }

        /// <summary>
        /// Number of pages
        /// </summary>
        /// <value>Number of pages</value>
        [Required]
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public int Pages { get; set; }

        /// <summary>
        /// Filename
        /// </summary>
        /// <value>Filename</value>
        [Required]
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; set; }

        /// <summary>
        /// Letter delivery?
        /// </summary>
        /// <value>Letter delivery?</value>
        [Required]
        [DataMember(Name="letter", EmitDefaultValue=false)]
        public bool Letter { get; set; }

        /// <summary>
        /// Gets or Sets LetterDetails
        /// </summary>
        [Required]
        [DataMember(Name="letterDetails", EmitDefaultValue=false)]
        public GotomaxxPdfUploadRestResponseLetter LetterDetails { get; set; }

        /// <summary>
        /// Email delivery?
        /// </summary>
        /// <value>Email delivery?</value>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public bool Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailDetails
        /// </summary>
        [Required]
        [DataMember(Name="emailDetails", EmitDefaultValue=false)]
        public GotomaxxPdfUploadRestResponseEmail EmailDetails { get; set; }

        /// <summary>
        /// Fax delivery?
        /// </summary>
        /// <value>Fax delivery?</value>
        [Required]
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public bool Fax { get; set; }

        /// <summary>
        /// Gets or Sets FaxDetails
        /// </summary>
        [Required]
        [DataMember(Name="faxDetails", EmitDefaultValue=false)]
        public GotomaxxPdfUploadRestResponseFax FaxDetails { get; set; }

        /// <summary>
        /// SMS delivery?
        /// </summary>
        /// <value>SMS delivery?</value>
        [Required]
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public bool Sms { get; set; }

        /// <summary>
        /// Gets or Sets SmsDetails
        /// </summary>
        [Required]
        [DataMember(Name="smsDetails", EmitDefaultValue=false)]
        public GotomaxxPdfUploadRestResponseSMS SmsDetails { get; set; }

        /// <summary>
        /// Online delivery?
        /// </summary>
        /// <value>Online delivery?</value>
        [Required]
        [DataMember(Name="online", EmitDefaultValue=false)]
        public bool Online { get; set; }

        /// <summary>
        /// Gets or Sets OnlineDetails
        /// </summary>
        [Required]
        [DataMember(Name="onlineDetails", EmitDefaultValue=false)]
        public GotomaxxPdfUploadRestResponseOnline OnlineDetails { get; set; }

        /// <summary>
        /// Document form processing?
        /// </summary>
        /// <value>Document form processing?</value>
        [Required]
        [DataMember(Name="form", EmitDefaultValue=false)]
        public bool Form { get; set; }

        /// <summary>
        /// Gets or Sets FormDetails
        /// </summary>
        [Required]
        [DataMember(Name="formDetails", EmitDefaultValue=false)]
        public GotomaxxPdfUploadRestResponseForm FormDetails { get; set; }

        /// <summary>
        /// Automatic delivery?
        /// </summary>
        /// <value>Automatic delivery?</value>
        [Required]
        [DataMember(Name="autoDelivery", EmitDefaultValue=false)]
        public bool AutoDelivery { get; set; }

        /// <summary>
        /// Used sending profile ID
        /// </summary>
        /// <value>Used sending profile ID</value>
        [Required]
        [DataMember(Name="sendingProfile", EmitDefaultValue=false)]
        public int SendingProfile { get; set; }

        /// <summary>
        /// Name of the used sending profile
        /// </summary>
        /// <value>Name of the used sending profile</value>
        [Required]
        [DataMember(Name="sendingProfileName", EmitDefaultValue=true)]
        public string SendingProfileName { get; set; }

        /// <summary>
        /// Recipient customer number
        /// </summary>
        /// <value>Recipient customer number</value>
        [Required]
        [DataMember(Name="customer", EmitDefaultValue=true)]
        public string Customer { get; set; }

        /// <summary>
        /// Is this a private upload?
        /// </summary>
        /// <value>Is this a private upload?</value>
        [Required]
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool Private { get; set; }

        /// <summary>
        /// Net price
        /// </summary>
        /// <value>Net price</value>
        [Required]
        [DataMember(Name="netPrice", EmitDefaultValue=false)]
        public decimal NetPrice { get; set; }

        /// <summary>
        /// Tax percent
        /// </summary>
        /// <value>Tax percent</value>
        [Required]
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public int Tax { get; set; }

        /// <summary>
        /// Tax amount
        /// </summary>
        /// <value>Tax amount</value>
        [Required]
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public decimal TaxAmount { get; set; }

        /// <summary>
        /// PDF file contents
        /// </summary>
        /// <value>PDF file contents</value>
        [Required]
        [DataMember(Name="pdf", EmitDefaultValue=true)]
        public string Pdf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GotomaxxPdfUploadRestResponse {\n");
            sb.Append("  Portal: ").Append(Portal).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AsyncUploadToken: ").Append(AsyncUploadToken).Append("\n");
            sb.Append("  Uploaded: ").Append(Uploaded).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Letter: ").Append(Letter).Append("\n");
            sb.Append("  LetterDetails: ").Append(LetterDetails).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailDetails: ").Append(EmailDetails).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FaxDetails: ").Append(FaxDetails).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  SmsDetails: ").Append(SmsDetails).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  OnlineDetails: ").Append(OnlineDetails).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  FormDetails: ").Append(FormDetails).Append("\n");
            sb.Append("  AutoDelivery: ").Append(AutoDelivery).Append("\n");
            sb.Append("  SendingProfile: ").Append(SendingProfile).Append("\n");
            sb.Append("  SendingProfileName: ").Append(SendingProfileName).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  Pdf: ").Append(Pdf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GotomaxxPdfUploadRestResponse)obj);
        }

        /// <summary>
        /// Returns true if GotomaxxPdfUploadRestResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GotomaxxPdfUploadRestResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GotomaxxPdfUploadRestResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Portal == other.Portal ||
                    
                    Portal.Equals(other.Portal)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    AsyncUploadToken == other.AsyncUploadToken ||
                    AsyncUploadToken != null &&
                    AsyncUploadToken.Equals(other.AsyncUploadToken)
                ) && 
                (
                    Uploaded == other.Uploaded ||
                    
                    Uploaded.Equals(other.Uploaded)
                ) && 
                (
                    Delivered == other.Delivered ||
                    
                    Delivered.Equals(other.Delivered)
                ) && 
                (
                    Size == other.Size ||
                    
                    Size.Equals(other.Size)
                ) && 
                (
                    Pages == other.Pages ||
                    
                    Pages.Equals(other.Pages)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    Letter == other.Letter ||
                    
                    Letter.Equals(other.Letter)
                ) && 
                (
                    LetterDetails == other.LetterDetails ||
                    LetterDetails != null &&
                    LetterDetails.Equals(other.LetterDetails)
                ) && 
                (
                    Email == other.Email ||
                    
                    Email.Equals(other.Email)
                ) && 
                (
                    EmailDetails == other.EmailDetails ||
                    EmailDetails != null &&
                    EmailDetails.Equals(other.EmailDetails)
                ) && 
                (
                    Fax == other.Fax ||
                    
                    Fax.Equals(other.Fax)
                ) && 
                (
                    FaxDetails == other.FaxDetails ||
                    FaxDetails != null &&
                    FaxDetails.Equals(other.FaxDetails)
                ) && 
                (
                    Sms == other.Sms ||
                    
                    Sms.Equals(other.Sms)
                ) && 
                (
                    SmsDetails == other.SmsDetails ||
                    SmsDetails != null &&
                    SmsDetails.Equals(other.SmsDetails)
                ) && 
                (
                    Online == other.Online ||
                    
                    Online.Equals(other.Online)
                ) && 
                (
                    OnlineDetails == other.OnlineDetails ||
                    OnlineDetails != null &&
                    OnlineDetails.Equals(other.OnlineDetails)
                ) && 
                (
                    Form == other.Form ||
                    
                    Form.Equals(other.Form)
                ) && 
                (
                    FormDetails == other.FormDetails ||
                    FormDetails != null &&
                    FormDetails.Equals(other.FormDetails)
                ) && 
                (
                    AutoDelivery == other.AutoDelivery ||
                    
                    AutoDelivery.Equals(other.AutoDelivery)
                ) && 
                (
                    SendingProfile == other.SendingProfile ||
                    
                    SendingProfile.Equals(other.SendingProfile)
                ) && 
                (
                    SendingProfileName == other.SendingProfileName ||
                    SendingProfileName != null &&
                    SendingProfileName.Equals(other.SendingProfileName)
                ) && 
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) && 
                (
                    Private == other.Private ||
                    
                    Private.Equals(other.Private)
                ) && 
                (
                    NetPrice == other.NetPrice ||
                    
                    NetPrice.Equals(other.NetPrice)
                ) && 
                (
                    Tax == other.Tax ||
                    
                    Tax.Equals(other.Tax)
                ) && 
                (
                    TaxAmount == other.TaxAmount ||
                    
                    TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    Pdf == other.Pdf ||
                    Pdf != null &&
                    Pdf.Equals(other.Pdf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Portal.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AsyncUploadToken != null)
                    hashCode = hashCode * 59 + AsyncUploadToken.GetHashCode();
                    
                    hashCode = hashCode * 59 + Uploaded.GetHashCode();
                    
                    hashCode = hashCode * 59 + Delivered.GetHashCode();
                    
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pages.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    
                    hashCode = hashCode * 59 + Letter.GetHashCode();
                    if (LetterDetails != null)
                    hashCode = hashCode * 59 + LetterDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (EmailDetails != null)
                    hashCode = hashCode * 59 + EmailDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Fax.GetHashCode();
                    if (FaxDetails != null)
                    hashCode = hashCode * 59 + FaxDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sms.GetHashCode();
                    if (SmsDetails != null)
                    hashCode = hashCode * 59 + SmsDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Online.GetHashCode();
                    if (OnlineDetails != null)
                    hashCode = hashCode * 59 + OnlineDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Form.GetHashCode();
                    if (FormDetails != null)
                    hashCode = hashCode * 59 + FormDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoDelivery.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendingProfile.GetHashCode();
                    if (SendingProfileName != null)
                    hashCode = hashCode * 59 + SendingProfileName.GetHashCode();
                    if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                    
                    hashCode = hashCode * 59 + Private.GetHashCode();
                    
                    hashCode = hashCode * 59 + NetPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    
                    hashCode = hashCode * 59 + TaxAmount.GetHashCode();
                    if (Pdf != null)
                    hashCode = hashCode * 59 + Pdf.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GotomaxxPdfUploadRestResponse left, GotomaxxPdfUploadRestResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GotomaxxPdfUploadRestResponse left, GotomaxxPdfUploadRestResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
