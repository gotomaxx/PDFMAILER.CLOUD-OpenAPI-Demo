/*
 * Outgoing file RESTful service
 *
 * The methods are restricted to portal user that have the permission for sending documents. Different API versions work differently - be sure  you know what you're doing, before you set an API version. The portal may define a minimum API version that can't be overridden.  Before you can use the REST API for your portal, you need to accept the DSGVO AVV once. Also, the REST API is currently restricted to customers  that bought a PDFMAILER (non-Pure) license from gotomaxx directly, or are coming from XRechnung.new or ZUGFeRD.new.  If you don't know how to get your personal Bearer token (which is required to call any API method), please contact our technical support.  In case your REST client doesn't support OAuth2 or Bearer token, there are other possibilities for authentication:  - Use basic http authentication with your user credentials - Send a valid session ID as value in the parameter (GET or POST) `__sid` with every request  Please ask our technical staff for instructions how to create a valid session ID that can be used with this REST API.  __NOTE__: Boolean parameter values should be given as `1` (`true`) or `0` (`false`).  __NOTE__: The XRechnung API functionality requires a separate license and user permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// PDF upload document form details response object
    /// </summary>
    [DataContract]
    public partial class GotomaxxPdfUploadRestResponseForm : IEquatable<GotomaxxPdfUploadRestResponseForm>
    {
        /// <summary>
        /// Source form ID  __NOTE__: This is the ID of the source document form from which this PDF document was created. The source document form may be modified or even deleted after  this PDF document was created, which won&#39;t have any effect on this PDF document, its cloned form structure and its data.
        /// </summary>
        /// <value>Source form ID  __NOTE__: This is the ID of the source document form from which this PDF document was created. The source document form may be modified or even deleted after  this PDF document was created, which won&#39;t have any effect on this PDF document, its cloned form structure and its data.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Form name
        /// </summary>
        /// <value>Form name</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="form", EmitDefaultValue=false)]
        public string Form { get; set; }

        /// <summary>
        /// Currently processing party name  __NOTE__: The value is &#x60;NULL&#x60;, if currently no party is processing the document form.
        /// </summary>
        /// <value>Currently processing party name  __NOTE__: The value is &#x60;NULL&#x60;, if currently no party is processing the document form.</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="party", EmitDefaultValue=true)]
        public string Party { get; set; }

        /// <summary>
        /// Email address of the current party
        /// </summary>
        /// <value>Email address of the current party</value>
        [Required]
        [MinLength(6)]
        [DataMember(Name="partyEmail", EmitDefaultValue=true)]
        public string PartyEmail { get; set; }

        /// <summary>
        /// Time when the currently processing party was invited  __NOTE__: The value is zero, if the form has been fuly processed, or no party was invited yet.
        /// </summary>
        /// <value>Time when the currently processing party was invited  __NOTE__: The value is zero, if the form has been fuly processed, or no party was invited yet.</value>
        [Required]
        [DataMember(Name="invited", EmitDefaultValue=false)]
        public int Invited { get; set; }

        /// <summary>
        /// Current form data
        /// </summary>
        /// <value>Current form data</value>
        [Required]
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<GotomaxxJsonKeyValuePair> Data { get; set; }

        /// <summary>
        /// Protocol entries
        /// </summary>
        /// <value>Protocol entries</value>
        [Required]
        [DataMember(Name="protocol", EmitDefaultValue=true)]
        public List<string> Protocol { get; set; }

        /// <summary>
        /// XML form data  __NOTE__: The data will be available as soon as the form was fully processed.
        /// </summary>
        /// <value>XML form data  __NOTE__: The data will be available as soon as the form was fully processed.</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="xml", EmitDefaultValue=true)]
        public string Xml { get; set; }

        /// <summary>
        /// JSON form data  __NOTE__: The data will be available as soon as the form was fully processed.
        /// </summary>
        /// <value>JSON form data  __NOTE__: The data will be available as soon as the form was fully processed.</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="json", EmitDefaultValue=true)]
        public string Json { get; set; }

        /// <summary>
        /// Text form data  Each key/value pair will be separated with two line breaks and formatted like this example:   KEY: VALUE  __NOTE__: The data will be available as soon as the form was fully processed.
        /// </summary>
        /// <value>Text form data  Each key/value pair will be separated with two line breaks and formatted like this example:   KEY: VALUE  __NOTE__: The data will be available as soon as the form was fully processed.</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }


        /// <summary>
        /// Processing status  Possible status values are:  - `0`: None - `1`: Waiting for parties to process the form - `2`: Finalizing - `3`: Done
        /// </summary>
        /// <value>Processing status  Possible status values are:  - `0`: None - `1`: Waiting for parties to process the form - `2`: Finalizing - `3`: Done</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            
            _0Enum = 0,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            
            _1Enum = 1,
            
            /// <summary>
            /// Enum _2Enum for 2
            /// </summary>
            
            _2Enum = 2,
            
            /// <summary>
            /// Enum _3Enum for 3
            /// </summary>
            
            _3Enum = 3
        }

        /// <summary>
        /// Processing status  Possible status values are:  - &#x60;0&#x60;: None - &#x60;1&#x60;: Waiting for parties to process the form - &#x60;2&#x60;: Finalizing - &#x60;3&#x60;: Done
        /// </summary>
        /// <value>Processing status  Possible status values are:  - &#x60;0&#x60;: None - &#x60;1&#x60;: Waiting for parties to process the form - &#x60;2&#x60;: Finalizing - &#x60;3&#x60;: Done</value>
        [Required]
        [Range(0, 3)]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GotomaxxPdfUploadRestResponseForm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("  PartyEmail: ").Append(PartyEmail).Append("\n");
            sb.Append("  Invited: ").Append(Invited).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GotomaxxPdfUploadRestResponseForm)obj);
        }

        /// <summary>
        /// Returns true if GotomaxxPdfUploadRestResponseForm instances are equal
        /// </summary>
        /// <param name="other">Instance of GotomaxxPdfUploadRestResponseForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GotomaxxPdfUploadRestResponseForm other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Form == other.Form ||
                    Form != null &&
                    Form.Equals(other.Form)
                ) && 
                (
                    Party == other.Party ||
                    Party != null &&
                    Party.Equals(other.Party)
                ) && 
                (
                    PartyEmail == other.PartyEmail ||
                    PartyEmail != null &&
                    PartyEmail.Equals(other.PartyEmail)
                ) && 
                (
                    Invited == other.Invited ||
                    
                    Invited.Equals(other.Invited)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    other.Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    other.Protocol != null &&
                    Protocol.SequenceEqual(other.Protocol)
                ) && 
                (
                    Xml == other.Xml ||
                    Xml != null &&
                    Xml.Equals(other.Xml)
                ) && 
                (
                    Json == other.Json ||
                    Json != null &&
                    Json.Equals(other.Json)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Form != null)
                    hashCode = hashCode * 59 + Form.GetHashCode();
                    if (Party != null)
                    hashCode = hashCode * 59 + Party.GetHashCode();
                    if (PartyEmail != null)
                    hashCode = hashCode * 59 + PartyEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + Invited.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    if (Xml != null)
                    hashCode = hashCode * 59 + Xml.GetHashCode();
                    if (Json != null)
                    hashCode = hashCode * 59 + Json.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GotomaxxPdfUploadRestResponseForm left, GotomaxxPdfUploadRestResponseForm right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GotomaxxPdfUploadRestResponseForm left, GotomaxxPdfUploadRestResponseForm right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
