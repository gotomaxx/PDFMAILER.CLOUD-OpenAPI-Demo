/*
 * Outgoing file RESTful service
 *
 * The methods are restricted to portal user that have the permission for sending documents. Different API versions work differently - be sure  you know what you're doing, before you set an API version. The portal may define a minimum API version that can't be overridden.  Before you can use the REST API for your portal, you need to accept the DSGVO AVV once. Also, the REST API is currently restricted to customers  that bought a PDFMAILER (non-Pure) license from gotomaxx directly, or are coming from XRechnung.new or ZUGFeRD.new.  If you don't know how to get your personal Bearer token (which is required to call any API method), please contact our technical support.  In case your REST client doesn't support OAuth2 or Bearer token, there are other possibilities for authentication:  - Use basic http authentication with your user credentials - Send a valid session ID as value in the parameter (GET or POST) `__sid` with every request  Please ask our technical staff for instructions how to create a valid session ID that can be used with this REST API.  __NOTE__: Boolean parameter values should be given as `1` (`true`) or `0` (`false`).  __NOTE__: The XRechnung API functionality requires a separate license and user permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// JSON document header object template for documentation purposes and XML transformation
    /// </summary>
    [DataContract]
    public partial class GotomaxxJsonDocumentHeader : IEquatable<GotomaxxJsonDocumentHeader>
    {

        /// <summary>
        /// Type  - `326`: Partial invoice - `380`: Invoice - `384`: Invoice correction - `389`: Self-invoicing invoice - `381`: Credit - `875`: Partial construction invoice - `876`: Partial construction end-invoice - `877`: Final construction invoice
        /// </summary>
        /// <value>Type  - `326`: Partial invoice - `380`: Invoice - `384`: Invoice correction - `389`: Self-invoicing invoice - `381`: Credit - `875`: Partial construction invoice - `876`: Partial construction end-invoice - `877`: Final construction invoice</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum _326Enum for 326
            /// </summary>
            [EnumMember(Value = "326")]
            _326Enum = 1,
            
            /// <summary>
            /// Enum _380Enum for 380
            /// </summary>
            [EnumMember(Value = "380")]
            _380Enum = 2,
            
            /// <summary>
            /// Enum _384Enum for 384
            /// </summary>
            [EnumMember(Value = "384")]
            _384Enum = 3,
            
            /// <summary>
            /// Enum _389Enum for 389
            /// </summary>
            [EnumMember(Value = "389")]
            _389Enum = 4,
            
            /// <summary>
            /// Enum _381Enum for 381
            /// </summary>
            [EnumMember(Value = "381")]
            _381Enum = 5,
            
            /// <summary>
            /// Enum _875Enum for 875
            /// </summary>
            [EnumMember(Value = "875")]
            _875Enum = 6,
            
            /// <summary>
            /// Enum _876Enum for 876
            /// </summary>
            [EnumMember(Value = "876")]
            _876Enum = 7,
            
            /// <summary>
            /// Enum _877Enum for 877
            /// </summary>
            [EnumMember(Value = "877")]
            _877Enum = 8
        }

        /// <summary>
        /// Type  - &#x60;326&#x60;: Partial invoice - &#x60;380&#x60;: Invoice - &#x60;384&#x60;: Invoice correction - &#x60;389&#x60;: Self-invoicing invoice - &#x60;381&#x60;: Credit - &#x60;875&#x60;: Partial construction invoice - &#x60;876&#x60;: Partial construction end-invoice - &#x60;877&#x60;: Final construction invoice
        /// </summary>
        /// <value>Type  - &#x60;326&#x60;: Partial invoice - &#x60;380&#x60;: Invoice - &#x60;384&#x60;: Invoice correction - &#x60;389&#x60;: Self-invoicing invoice - &#x60;381&#x60;: Credit - &#x60;875&#x60;: Partial construction invoice - &#x60;876&#x60;: Partial construction end-invoice - &#x60;877&#x60;: Final construction invoice</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [TypeConverter(typeof(CustomEnumConverter<CurrencyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum EUREnum for EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUREnum = 1,
            
            /// <summary>
            /// Enum USDEnum for USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USDEnum = 2,
            
            /// <summary>
            /// Enum CHFEnum for CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHFEnum = 3
        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum Currency { get; set; }

        /// <summary>
        /// ID (BT-1)
        /// </summary>
        /// <value>ID (BT-1)</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Document date (BT-2) as &#x60;YYYY-MM-DD&#x60;  __NOTE__: Actually this value is required, but can be auto-completed using todays date.
        /// </summary>
        /// <value>Document date (BT-2) as &#x60;YYYY-MM-DD&#x60;  __NOTE__: Actually this value is required, but can be auto-completed using todays date.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateOnly Date { get; set; }

        /// <summary>
        /// Buyer reference ID (BT-13)
        /// </summary>
        /// <value>Buyer reference ID (BT-13)</value>
        [MinLength(1)]
        [DataMember(Name="buyerId", EmitDefaultValue=false)]
        public string BuyerId { get; set; }

        /// <summary>
        /// Delivery date (BT-72) as &#x60;YYYY-MM-DD&#x60;  __NOTE__: Actually this value is required, but can be auto-completed using the document date.
        /// </summary>
        /// <value>Delivery date (BT-72) as &#x60;YYYY-MM-DD&#x60;  __NOTE__: Actually this value is required, but can be auto-completed using the document date.</value>
        [DataMember(Name="delivery", EmitDefaultValue=false)]
        public DateOnly Delivery { get; set; }

        /// <summary>
        /// Routing ID (BT-10)  __NOTE__: This property is required for XRechnung!
        /// </summary>
        /// <value>Routing ID (BT-10)  __NOTE__: This property is required for XRechnung!</value>
        [DataMember(Name="routing", EmitDefaultValue=false)]
        public string Routing { get; set; }

        /// <summary>
        /// Note (BT-22)
        /// </summary>
        /// <value>Note (BT-22)</value>
        [MinLength(1)]
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Project reference ID (BT-11)
        /// </summary>
        /// <value>Project reference ID (BT-11)</value>
        [MinLength(1)]
        [DataMember(Name="project", EmitDefaultValue=false)]
        public string Project { get; set; }

        /// <summary>
        /// Contract reference ID (BT-12)
        /// </summary>
        /// <value>Contract reference ID (BT-12)</value>
        [MinLength(1)]
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string Contract { get; set; }

        /// <summary>
        /// Sales reference ID (BT-14)
        /// </summary>
        /// <value>Sales reference ID (BT-14)</value>
        [MinLength(1)]
        [DataMember(Name="sales", EmitDefaultValue=false)]
        public string Sales { get; set; }

        /// <summary>
        /// Tender reference ID (BT-17)
        /// </summary>
        /// <value>Tender reference ID (BT-17)</value>
        [MinLength(1)]
        [DataMember(Name="tender", EmitDefaultValue=false)]
        public string Tender { get; set; }

        /// <summary>
        /// Object reference ID (BT-18)
        /// </summary>
        /// <value>Object reference ID (BT-18)</value>
        [MinLength(1)]
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// Period start date (BT-73) as &#x60;YYYY-MM-DD&#x60;
        /// </summary>
        /// <value>Period start date (BT-73) as &#x60;YYYY-MM-DD&#x60;</value>
        [DataMember(Name="periodStart", EmitDefaultValue=false)]
        public DateOnly PeriodStart { get; set; }

        /// <summary>
        /// Period end date (BT-74) as &#x60;YYYY-MM-DD&#x60;
        /// </summary>
        /// <value>Period end date (BT-74) as &#x60;YYYY-MM-DD&#x60;</value>
        [DataMember(Name="periodEnd", EmitDefaultValue=false)]
        public DateOnly PeriodEnd { get; set; }

        /// <summary>
        /// Preceding invoice ID (BT-25)
        /// </summary>
        /// <value>Preceding invoice ID (BT-25)</value>
        [MinLength(1)]
        [DataMember(Name="precedingInvoiceId", EmitDefaultValue=false)]
        public string PrecedingInvoiceId { get; set; }

        /// <summary>
        /// Preceding invoice date (BT-26) as &#x60;YYYY-MM-DD&#x60;
        /// </summary>
        /// <value>Preceding invoice date (BT-26) as &#x60;YYYY-MM-DD&#x60;</value>
        [DataMember(Name="precedingInvoiceDate", EmitDefaultValue=false)]
        public DateOnly PrecedingInvoiceDate { get; set; }

        /// <summary>
        /// VAT except reason (BT-120)
        /// </summary>
        /// <value>VAT except reason (BT-120)</value>
        [MinLength(1)]
        [DataMember(Name="vatExceptReason", EmitDefaultValue=false)]
        public string VatExceptReason { get; set; }

        /// <summary>
        /// Test indicator
        /// </summary>
        /// <value>Test indicator</value>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public bool Test { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GotomaxxJsonDocumentHeader {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Routing: ").Append(Routing).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Tender: ").Append(Tender).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  PrecedingInvoiceId: ").Append(PrecedingInvoiceId).Append("\n");
            sb.Append("  PrecedingInvoiceDate: ").Append(PrecedingInvoiceDate).Append("\n");
            sb.Append("  VatExceptReason: ").Append(VatExceptReason).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GotomaxxJsonDocumentHeader)obj);
        }

        /// <summary>
        /// Returns true if GotomaxxJsonDocumentHeader instances are equal
        /// </summary>
        /// <param name="other">Instance of GotomaxxJsonDocumentHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GotomaxxJsonDocumentHeader other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    BuyerId == other.BuyerId ||
                    BuyerId != null &&
                    BuyerId.Equals(other.BuyerId)
                ) && 
                (
                    Delivery == other.Delivery ||
                    Delivery != null &&
                    Delivery.Equals(other.Delivery)
                ) && 
                (
                    Routing == other.Routing ||
                    Routing != null &&
                    Routing.Equals(other.Routing)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Project == other.Project ||
                    Project != null &&
                    Project.Equals(other.Project)
                ) && 
                (
                    Contract == other.Contract ||
                    Contract != null &&
                    Contract.Equals(other.Contract)
                ) && 
                (
                    Sales == other.Sales ||
                    Sales != null &&
                    Sales.Equals(other.Sales)
                ) && 
                (
                    Tender == other.Tender ||
                    Tender != null &&
                    Tender.Equals(other.Tender)
                ) && 
                (
                    Object == other.Object ||
                    Object != null &&
                    Object.Equals(other.Object)
                ) && 
                (
                    PeriodStart == other.PeriodStart ||
                    PeriodStart != null &&
                    PeriodStart.Equals(other.PeriodStart)
                ) && 
                (
                    PeriodEnd == other.PeriodEnd ||
                    PeriodEnd != null &&
                    PeriodEnd.Equals(other.PeriodEnd)
                ) && 
                (
                    PrecedingInvoiceId == other.PrecedingInvoiceId ||
                    PrecedingInvoiceId != null &&
                    PrecedingInvoiceId.Equals(other.PrecedingInvoiceId)
                ) && 
                (
                    PrecedingInvoiceDate == other.PrecedingInvoiceDate ||
                    PrecedingInvoiceDate != null &&
                    PrecedingInvoiceDate.Equals(other.PrecedingInvoiceDate)
                ) && 
                (
                    VatExceptReason == other.VatExceptReason ||
                    VatExceptReason != null &&
                    VatExceptReason.Equals(other.VatExceptReason)
                ) && 
                (
                    Test == other.Test ||
                    
                    Test.Equals(other.Test)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (BuyerId != null)
                    hashCode = hashCode * 59 + BuyerId.GetHashCode();
                    if (Delivery != null)
                    hashCode = hashCode * 59 + Delivery.GetHashCode();
                    if (Routing != null)
                    hashCode = hashCode * 59 + Routing.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (Project != null)
                    hashCode = hashCode * 59 + Project.GetHashCode();
                    if (Contract != null)
                    hashCode = hashCode * 59 + Contract.GetHashCode();
                    if (Sales != null)
                    hashCode = hashCode * 59 + Sales.GetHashCode();
                    if (Tender != null)
                    hashCode = hashCode * 59 + Tender.GetHashCode();
                    if (Object != null)
                    hashCode = hashCode * 59 + Object.GetHashCode();
                    if (PeriodStart != null)
                    hashCode = hashCode * 59 + PeriodStart.GetHashCode();
                    if (PeriodEnd != null)
                    hashCode = hashCode * 59 + PeriodEnd.GetHashCode();
                    if (PrecedingInvoiceId != null)
                    hashCode = hashCode * 59 + PrecedingInvoiceId.GetHashCode();
                    if (PrecedingInvoiceDate != null)
                    hashCode = hashCode * 59 + PrecedingInvoiceDate.GetHashCode();
                    if (VatExceptReason != null)
                    hashCode = hashCode * 59 + VatExceptReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + Test.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GotomaxxJsonDocumentHeader left, GotomaxxJsonDocumentHeader right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GotomaxxJsonDocumentHeader left, GotomaxxJsonDocumentHeader right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
