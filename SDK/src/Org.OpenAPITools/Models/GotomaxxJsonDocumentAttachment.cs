/*
 * Outgoing file RESTful service
 *
 * The methods are restricted to portal user that have the permission for sending documents. Different API versions work differently - be sure  you know what you're doing, before you set an API version. The portal may define a minimum API version that can't be overridden.  Before you can use the REST API for your portal, you need to accept the DSGVO AVV once. Also, the REST API is currently restricted to customers  that bought a PDFMAILER (non-Pure) license from gotomaxx directly, or are coming from XRechnung.new or ZUGFeRD.new.  If you don't know how to get your personal Bearer token (which is required to call any API method), please contact our technical support.  In case your REST client doesn't support OAuth2 or Bearer token, there are other possibilities for authentication:  - Use basic http authentication with your user credentials - Send a valid session ID as value in the parameter (GET or POST) `__sid` with every request  Please ask our technical staff for instructions how to create a valid session ID that can be used with this REST API.  __NOTE__: Boolean parameter values should be given as `1` (`true`) or `0` (`false`).  __NOTE__: The XRechnung API functionality requires a separate license and user permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// JSON document attachment object template for documentation purposes and XML transformation
    /// </summary>
    [DataContract]
    public partial class GotomaxxJsonDocumentAttachment : IEquatable<GotomaxxJsonDocumentAttachment>
    {
        /// <summary>
        /// ID (BT-122)
        /// </summary>
        /// <value>ID (BT-122)</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Type  - `50`: Validated priced tender - `130`: Rechnungsdatenblatt - `916`: Referenzpapier
        /// </summary>
        /// <value>Type  - `50`: Validated priced tender - `130`: Rechnungsdatenblatt - `916`: Referenzpapier</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum _50Enum for 50
            /// </summary>
            [EnumMember(Value = "50")]
            _50Enum = 1,
            
            /// <summary>
            /// Enum _130Enum for 130
            /// </summary>
            [EnumMember(Value = "130")]
            _130Enum = 2,
            
            /// <summary>
            /// Enum _916Enum for 916
            /// </summary>
            [EnumMember(Value = "916")]
            _916Enum = 3
        }

        /// <summary>
        /// Type  - &#x60;50&#x60;: Validated priced tender - &#x60;130&#x60;: Rechnungsdatenblatt - &#x60;916&#x60;: Referenzpapier
        /// </summary>
        /// <value>Type  - &#x60;50&#x60;: Validated priced tender - &#x60;130&#x60;: Rechnungsdatenblatt - &#x60;916&#x60;: Referenzpapier</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Name (BT-123)
        /// </summary>
        /// <value>Name (BT-123)</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// File contents (BT-125)  __NOTE__: This value is required at upload time, if it&#39;s not the PDF file, that is being generated (see &#x60;isPdf&#x60; property).
        /// </summary>
        /// <value>File contents (BT-125)  __NOTE__: This value is required at upload time, if it&#39;s not the PDF file, that is being generated (see &#x60;isPdf&#x60; property).</value>
        [MinLength(1)]
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; set; }

        /// <summary>
        /// Is this attachment the base for the generated PDF file?  __NOTE__: The value can be &#x60;true&#x60; for one attachment only. In case of ZUGFeRD, the PDF file will be removed from the generated ZUGFeRD XML. In case of  XRechnung, the PDF file will stay embedded in XML (you&#39;ll get a \&quot;PDF file -&gt; XRechnung XML attachment -&gt; PDF file attachment\&quot; structure, finally).
        /// </summary>
        /// <value>Is this attachment the base for the generated PDF file?  __NOTE__: The value can be &#x60;true&#x60; for one attachment only. In case of ZUGFeRD, the PDF file will be removed from the generated ZUGFeRD XML. In case of  XRechnung, the PDF file will stay embedded in XML (you&#39;ll get a \&quot;PDF file -&gt; XRechnung XML attachment -&gt; PDF file attachment\&quot; structure, finally).</value>
        [DataMember(Name="isPdf", EmitDefaultValue=false)]
        public bool IsPdf { get; set; }


        /// <summary>
        /// MIME type  - `PDF`: PDF file - `PNG`: PNG image - `JPEG`: JPEG image - `OXML`: OpenXml spreadsheet - `ODOC`: OpenDocument spreadsheet
        /// </summary>
        /// <value>MIME type  - `PDF`: PDF file - `PNG`: PNG image - `JPEG`: JPEG image - `OXML`: OpenXml spreadsheet - `ODOC`: OpenDocument spreadsheet</value>
        [TypeConverter(typeof(CustomEnumConverter<MimeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MimeEnum
        {
            
            /// <summary>
            /// Enum PDFEnum for PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDFEnum = 1,
            
            /// <summary>
            /// Enum PNGEnum for PNG
            /// </summary>
            [EnumMember(Value = "PNG")]
            PNGEnum = 2,
            
            /// <summary>
            /// Enum JPEGEnum for JPEG
            /// </summary>
            [EnumMember(Value = "JPEG")]
            JPEGEnum = 3,
            
            /// <summary>
            /// Enum CSVEnum for CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSVEnum = 4,
            
            /// <summary>
            /// Enum OXMLEnum for OXML
            /// </summary>
            [EnumMember(Value = "OXML")]
            OXMLEnum = 5,
            
            /// <summary>
            /// Enum ODOCEnum for ODOC
            /// </summary>
            [EnumMember(Value = "ODOC")]
            ODOCEnum = 6
        }

        /// <summary>
        /// MIME type  - &#x60;PDF&#x60;: PDF file - &#x60;PNG&#x60;: PNG image - &#x60;JPEG&#x60;: JPEG image - &#x60;OXML&#x60;: OpenXml spreadsheet - &#x60;ODOC&#x60;: OpenDocument spreadsheet
        /// </summary>
        /// <value>MIME type  - &#x60;PDF&#x60;: PDF file - &#x60;PNG&#x60;: PNG image - &#x60;JPEG&#x60;: JPEG image - &#x60;OXML&#x60;: OpenXml spreadsheet - &#x60;ODOC&#x60;: OpenDocument spreadsheet</value>
        [DataMember(Name="mime", EmitDefaultValue=false)]
        public MimeEnum Mime { get; set; }

        /// <summary>
        /// Filename
        /// </summary>
        /// <value>Filename</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GotomaxxJsonDocumentAttachment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  IsPdf: ").Append(IsPdf).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GotomaxxJsonDocumentAttachment)obj);
        }

        /// <summary>
        /// Returns true if GotomaxxJsonDocumentAttachment instances are equal
        /// </summary>
        /// <param name="other">Instance of GotomaxxJsonDocumentAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GotomaxxJsonDocumentAttachment other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    IsPdf == other.IsPdf ||
                    
                    IsPdf.Equals(other.IsPdf)
                ) && 
                (
                    Mime == other.Mime ||
                    
                    Mime.Equals(other.Mime)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPdf.GetHashCode();
                    
                    hashCode = hashCode * 59 + Mime.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GotomaxxJsonDocumentAttachment left, GotomaxxJsonDocumentAttachment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GotomaxxJsonDocumentAttachment left, GotomaxxJsonDocumentAttachment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
